#!/usr/bin/env python

"""Nagios plugin for monitoring 3ware and Adaptec RAID arrays"""

from __future__ import print_function
from optparse import OptionParser
import os
import re
from subprocess import Popen, PIPE
import sys

NAGIOS_STATE_OK = 0
NAGIOS_STATE_WARNING = 1
NAGIOS_STATE_CRITICAL = 2
NAGIOS_STATE_UNKNOWN = 3

UNIT_STATE_OK = ('ok', 'optimal')
UNIT_STATE_VERIFYING = ('verifying',)
UNIT_STATE_REBUILDING = ('rebuilding',)
DRIVE_STATE_OK = ('ok', 'online', 'hot spare')
BATTERY_STATE_OK = ('ok', 'optimal')

CONTROLLERS = {
    '3ware': {
        'command': 'tw_cli /{id} show',
        'script_name': 'check_3ware_raid',
        'default_id': 'c0'
    },
    'adaptec': {
        'command': 'arcconf getconfig {id}',
        'script_name': 'check_adaptec_raid',
        'default_id': '1'
    }
}


def call(command):
    """Executes command in a shell"""
    process = Popen(command, stdout=PIPE, stderr=PIPE, shell=True)
    (stdout, stderr) = process.communicate()
    return (process.returncode, stdout.decode('utf8'), stderr.decode('utf8'))


def get_controller_info(command):
    """Returns standard output of command

    None is returned if execution fails.
    """
    (returncode, stdout, stderr) = call(command)

    if returncode == 0:
        return stdout

    print(stderr, file=sys.stderr)
    return None


def parse_3ware_info(info, battery=False):
    """Parses output of tw_cli

    Returns a tuple with status of arrays, drives and battery, all described by
    keywords taken from the command output.
    """
    parser_states = {
        'unit': None,
        'port': re.compile(r'^(V?)Port'),
        'name': re.compile(r'^Name')
    }
    parser_state = 'unit'

    unit_status_re = re.compile(r'u[0-9]+\s+[^\s]+\s+([^\s]+)')
    drive_status_re = re.compile(r'p[0-9]+\s+([^\s]+)')
    battery_status_re = re.compile(r'bbu\s+[^\s]+\s+[^\s]+\s+([^\s]+)')

    status = {'units': [], 'drives': [], 'battery': None}

    for line in info.split('\n'):
        if parser_state == 'unit':
            if parser_states['port'].search(line):
                parser_state = 'port'
                continue
            match = unit_status_re.search(line)
            if not match:
                continue
            status['units'].append(match.group(1).lower())
        elif parser_state == 'port':
            if parser_states['name'].search(line):
                if not battery:
                    break
                parser_state = 'name'
                continue
            match = drive_status_re.search(line)
            if not match:
                continue
            status['drives'].append(match.group(1).lower())
        elif parser_state == 'name':
            match = battery_status_re.search(line)
            if not match:
                continue
            status['battery'] = match.group(1).lower()

    return status


def parse_adaptec_info(info, battery=False):
    """Parses output of arcconf

    Returns a tuple with status of arrays, drives and battery, all described by
    keywords taken from the command output.
    """
    parser_states = {
        'controller_battery_information': None,
        'logical_device_information':
            re.compile(r'Logical device information'),
        'physical_device_information':
            re.compile(r'Physical Device information')
    }
    parser_state = 'controller_battery_information'

    unit_status_re = re.compile(r'\s*Status of logical device\s*:\s+(.+)')
    drive_status_re = re.compile(r'\s*State\s*:\s+(.+)')
    battery_status_re = re.compile(r'\s*Status\s*:\s+(.+)')

    status = {'units': [], 'drives': [], 'battery': None}

    for line in info.split('\n'):
        if parser_state == 'controller_battery_information':
            if (not battery or
                    parser_states['logical_device_information'].search(line)):
                parser_state = 'logical_device_information'
                continue
            match = battery_status_re.match(line)
            if not match:
                continue
            status['battery'] = match.group(1).lower()
        elif parser_state == 'logical_device_information':
            if parser_states['physical_device_information'].search(line):
                parser_state = 'physical_device_information'
                continue
            match = unit_status_re.match(line)
            if not match:
                continue
            status['units'].append(match.group(1).lower())
        elif parser_state == 'physical_device_information':
            match = drive_status_re.match(line)
            if not match:
                continue
            status['drives'].append(match.group(1).lower())

    return status


if __name__ == "__main__":
    parser = OptionParser(usage="%prog [options] 3ware|adaptec")
    parser.add_option("-b", "--bbu",
                      action="store_true", dest="battery", default=False,
                      help="check status of battery backup unit")
    parser.add_option("-i", "--id",
                      dest="id", metavar="cX|X",
                      help=("controller id " +
                            "(default: {} for 3ware, {} for adaptec)".format(
                                CONTROLLERS['3ware']['default_id'],
                                CONTROLLERS['adaptec']['default_id'])))

    (options, args) = parser.parse_args()

    if len(args) < 1:
        script_name = os.path.basename(sys.argv[0])
        controller_found = False
        for controller_type, params in CONTROLLERS.items():
            if script_name == params['script_name']:
                controller_found = True
                break
        if not controller_found:
            parser.error("controller type is required")
    else:
        controller_type = args[0]

    if controller_type not in CONTROLLERS:
        parser.error("invalid controller type")

    if not options.id:
        options.id = CONTROLLERS[controller_type]['default_id']

    command = CONTROLLERS[controller_type]['command'].format(id=options.id)
    info = get_controller_info(command)

    if not info:
        print("Unable to read `{}` output".format(command))
        sys.exit(NAGIOS_STATE_UNKNOWN)

    parse_func = globals()['parse_' + controller_type + '_info']
    status = parse_func(info, options.battery)

    if not status['units']:
        print("Unable to get unit info from `{}` output".format(command))
        sys.exit(NAGIOS_STATE_UNKNOWN)

    if not status['drives']:
        print("Unable to get drive info from `{}` output".format(command))
        sys.exit(NAGIOS_STATE_UNKNOWN)

    if options.battery and not status['battery']:
        print("Unable to get battery info from `{}` output".format(command))
        sys.exit(NAGIOS_STATE_UNKNOWN)

    message = ''
    exit_code = NAGIOS_STATE_UNKNOWN

    units = {}
    drives = {}

    for i in range(len(status['units'])):
        state = status['units'][i]

        if state in UNIT_STATE_OK or state in UNIT_STATE_VERIFYING:
            exit_code = NAGIOS_STATE_OK
        elif (state in UNIT_STATE_REBUILDING and
                exit_code <= NAGIOS_STATE_WARNING):
            exit_code = NAGIOS_STATE_WARNING
        else:
            exit_code = NAGIOS_STATE_CRITICAL

        if state not in units:
            units[state] = []
        units[state].append(str(i))

    for i in range(len(status['drives'])):
        state = status['drives'][i]

        if state not in DRIVE_STATE_OK and exit_code < NAGIOS_STATE_WARNING:
            exit_code = NAGIOS_STATE_WARNING

        if state not in drives:
            drives[state] = []
        drives[state].append(str(i))

    message += "unit(s): "
    for state in units:
        message += "#{} {} ".format(','.join(units[state]), state)
    message = message.rstrip() + ", drive(s): "

    for state in drives:
        message += "#{} {} ".format(','.join(drives[state]), state)
    message = message.rstrip()

    if options.battery:
        if status['battery'] not in BATTERY_STATE_OK:
            exit_code = NAGIOS_STATE_CRITICAL
        message += ", battery: {}".format(status['battery'])

    print(message)
    sys.exit(exit_code)
